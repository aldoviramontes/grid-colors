// Generated by CoffeeScript 1.7.1
(function() {
  var closeTooltip, getStyle, highlightByLegend, leafleg, legend, map, mousemove, mouseout, onEachFeature, popup, statesLayer, zoomToFeature;

  leafleg = L.leaflegend().color1("yellow").color2("blue").steps(4).xsize(4).ysize(4).makeGrid();

  getStyle = function(feature) {
    return {
      weight: 1,
      opacity: 0.1,
      color: "black",
      fillOpacity: 1,
      fillColor: leafleg.getColorByRangeAndSize(feature.properties.per_capt, feature.properties.density).c,
      className: "range-" + leafleg.getColorByRangeAndSize(feature.properties.per_capt, feature.properties.density).i,
      id: "range-" + leafleg.getColorByRangeAndSize(feature.properties.per_capt, feature.properties.density).i
    };
  };

  onEachFeature = function(feature, layer) {
    layer.on({
      mousemove: mousemove,
      mouseout: mouseout,
      click: zoomToFeature
    });
  };

  mousemove = function(e) {
    var colorIndex, layer, legendElement;
    layer = e.target;
    console.log(e);
    colorIndex = leafleg.getIndexByColor(e);
    console.log("index", colorIndex);
    legendElement = L.DomUtil.get("" + colorIndex);
    $(legendElement).css('border', '3px solid black');
    $(legendElement).css('border-radius', '10%');
    layer.setStyle({
      weight: 3,
      opacity: 0.3,
      fillOpacity: 0.9
    });
    if (!L.Browser.ie && !L.Browser.opera) {
      layer.bringToFront();
    }
  };

  mouseout = function(e) {
    var closeTooltip, colorIndex, layer, legendElement;
    statesLayer.resetStyle(e.target);
    layer = e.target;
    colorIndex = leafleg.getIndexByColor(e);
    legendElement = document.getElementById(colorIndex);
    $(legendElement).css('border', '0px solid white');
    $(legendElement).css('border-radius', '0%');
    closeTooltip = window.setTimeout(function() {
      map.closePopup();
    }, 100);
  };

  zoomToFeature = function(e) {
    map.fitBounds(e.target.getBounds());
  };

  highlightByLegend = function(legendColor) {
    var key, layer, mapLayers, val, xVal, x_val, yVal, y_val, _ref, _results;
    _ref = leafleg.options.index_dicts;
    for (key in _ref) {
      val = _ref[key];
      if (val.color.hex() === chroma.color(legendColor).hex()) {
        xVal = val.x_val;
        yVal = val.y_val;
      }
    }
    mapLayers = map._layers;
    _results = [];
    for (key in mapLayers) {
      val = mapLayers[key];
      if (val.feature) {
        x_val = val.feature.properties.density;
      }
      if (val.feature) {
        y_val = val.feature.properties.per_capt;
      }
      if (x_val === xVal && y_val === yVal) {
        _results.push(layer = val);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";

  map = L.mapbox.map("map").setView([37.8, -96], 4);

  popup = new L.Popup({
    autoPan: false
  });

  statesLayer = L.geoJson(statesData, {
    style: getStyle,
    onEachFeature: onEachFeature
  }).addTo(map);

  legend = L.control({
    position: "bottomright"
  });

  legend.onAdd = function(map) {
    var div, leg_div;
    leafleg = L.leaflegend().color1("yellow").color2("blue").steps(4).xsize(4).ysize(4).makeGrid();
    console.log("L", L);
    div = void 0;
    div = document.getElementById("leaflegend");
    leg_div = leafleg.getLegendHTML(map);
    return div;
  };

  legend.addTo(map);

  $("li .swatch").hover((function() {
    if ($(this).attr("id") !== void 0) {
      return highlightByLegend($(this).css("background-color"));
    }
  }));

  closeTooltip = void 0;

}).call(this);
